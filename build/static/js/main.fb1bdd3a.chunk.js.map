{"version":3,"sources":["components/TabMenuList.js","components/AddTaskForm.js","components/SingleInfoBar.js","components/EditTaskHead.js","components/EditTaskBody.js","components/SingleTask.js","sample-todos.js","components/TabContent.js","components/GithubBanner.js","components/App.js","index.js"],"names":["TabMenuList","react_default","a","createElement","className","react_router_dom","exact","to","activeClassName","AddTaskForm","formRef","React","createRef","titleRef","dateRef","timeRef","commentRef","completedRef","importantRef","createTask","e","preventDefault","addTask","_this","props","task","title","current","value","date","time","comment","completed","checked","important","alert","currentTarget","reset","clearInputValue","cancelAddTask","ref","this","onSubmit","type","name","id","htmlFor","placeholder","autoFocus","rows","onClick","Component","SingleInfoBar","_ref","data","EditTaskHead","uid","index","handleInputChange","openEditMode","currentPath","isEditMode","editStatus","dragStatus","importantStatus","completedStatus","infoBarStatus","length","paddingStyle","react_beautiful_dnd_esm","draggableId","provided","snapshot","dragStyle","Object","objectSpread2","boxShadow","isDragging","draggableProps","style","assign","concat","innerRef","dragHandleProps","onChange","components_SingleInfoBar","EditTaskBody","saveTask","resetTask","SingleTask","_e$currentTarget","inputValue","_this$props","updateTask","resetStar","defineProperty","_this$props2","components_EditTaskHead","components_EditTaskBody","todos","TabContent","baseState","state","tasks","toConsumableArray","sampleTodos","newTaskIsOpen","openNewTask","setState","Date","now","updatedTask","map","updatedContent","onDragEnd","result","source","destination","newTasks","removeData","splice","stateTasksValue","localStorage","getItem","baseStateValue","JSON","parse","setItem","stringify","_this2","_this$state","match","path","results","content","filter","components_AddTaskForm","droppableId","droppableProps","sort","b","components_SingleTask","key","GithubBanner","GithubCorner_default","href","bannerColor","size","target","App","routes","component","components_GithubBanner","components_TabMenuList","route","react_router","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.fb1bdd3a.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\n\nconst TabMenuList = () => (\n  <div className=\"tab-menu\">\n    <ul className=\"tab-menu__list wrapper-s\">\n      <li className=\"tab-menu__item\">\n        <NavLink exact to=\"/\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          My Tasks\n        </NavLink>\n      </li>\n      <li className=\"tab-menu__item\">\n        <NavLink to=\"/progress\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          In Progress\n        </NavLink>\n      </li>\n      <li className=\"tab-menu__item\">\n        <NavLink to=\"/completed\" className=\"tab-menu__link\" activeClassName=\"is-active\">\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default TabMenuList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTaskForm extends React.Component {\n  static propTypes = {\n    addTask: PropTypes.func.isRequired,\n    cancelAddTask: PropTypes.func.isRequired,\n  };\n\n  formRef = React.createRef();\n\n  titleRef = React.createRef();\n\n  dateRef = React.createRef();\n\n  timeRef = React.createRef();\n\n  commentRef = React.createRef();\n\n  completedRef = React.createRef();\n\n  importantRef = React.createRef();\n\n  createTask = e => {\n    e.preventDefault();\n\n    const { addTask } = this.props;\n    const task = {\n      title: this.titleRef.current.value,\n      date: this.dateRef.current.value,\n      time: this.timeRef.current.value,\n      comment: this.commentRef.current.value,\n      completed: this.completedRef.current.checked,\n      important: this.importantRef.current.checked,\n    };\n\n    // If the task marks completed, uncheck the star automatically.\n    if (task.completed) {\n      task.important = false;\n    }\n\n    if (this.titleRef.current.value === '') {\n      alert('Task name must be filled in!');\n    } else {\n      addTask(task);\n      e.currentTarget.reset();\n    }\n  };\n\n  clearInputValue = () => {\n    const { cancelAddTask } = this.props;\n    this.formRef.current.reset();\n    cancelAddTask();\n  };\n\n  render() {\n    return (\n      <form ref={this.formRef} className=\"single-task__edit new-task\" onSubmit={this.createTask}>\n        <div className=\"edit-head\">\n          <div className=\"edit-head__checkbox\">\n            <input ref={this.completedRef} type=\"checkbox\" name=\"completed\" id=\"completed\" />\n            <label htmlFor=\"completed\" />\n          </div>\n          <div className=\"edit-head__content\">\n            <input\n              ref={this.titleRef}\n              className=\"edit-head__input-title\"\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Add a task\"\n              autoFocus\n            />\n          </div>\n          <div className=\"edit-head__priority\">\n            <input ref={this.importantRef} type=\"checkbox\" name=\"important\" id=\"important\" />\n            <label htmlFor=\"important\" />\n          </div>\n          <div className=\"edit-head__edit is-editing\">\n            <i className=\"fas fa-pen edit-head__icon-edit\" />\n          </div>\n        </div>\n        <div className=\"edit-body\">\n          <div className=\"edit-body__content\">\n            <div className=\"edit-body__field\">\n              <label htmlFor=\"deadline\" className=\"edit-body__label\">\n                Deadline\n              </label>\n              <div className=\"edit-body__input-wrapper\">\n                <input ref={this.dateRef} type=\"date\" name=\"date\" />\n                <input ref={this.timeRef} type=\"time\" name=\"time\" />\n              </div>\n            </div>\n            <div className=\"edit-body__field\">\n              <label htmlFor=\"comment\" className=\"edit-body__label\">\n                Comment\n              </label>\n              <textarea\n                ref={this.commentRef}\n                name=\"comment\"\n                rows=\"8\"\n                placeholder=\"Type your memo here...\"\n              />\n            </div>\n          </div>\n          <div className=\"edit-body__btns\">\n            <button\n              type=\"button\"\n              className=\"edit-body__btn edit-body__btn--cancel\"\n              onClick={this.clearInputValue}\n            >\n              &#10005; Cancel\n            </button>\n            <button type=\"submit\" className=\"edit-body__btn edit-body__btn--add\">\n              ＋ Add Task\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default AddTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SingleInfoBar = ({ data }) => {\n  return (\n    <div className=\"single-item__infos\">\n      {data.date && (\n        <span className=\"single-item__info\">\n          <i className=\"far fa-calendar-alt single-item__icon-calendar\" />\n          <span className=\"single-item__txt\">{data.date}</span>\n        </span>\n      )}\n      {data.comment && (\n        <span className=\"single-item__info\">\n          <i className=\"far fa-comment-dots single-item__icon-comment\" />\n        </span>\n      )}\n    </div>\n  );\n};\n\nSingleInfoBar.propTypes = {\n  data: PropTypes.shape({\n    date: PropTypes.string,\n    comment: PropTypes.string,\n  }).isRequired,\n};\n\nexport default SingleInfoBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport SingleInfoBar from './SingleInfoBar';\n\nconst EditTaskHead = props => {\n  const { uid, index, data, handleInputChange, openEditMode, currentPath } = props;\n  const { title, date, comment, isEditMode, completed, important } = data;\n  const editStatus = isEditMode ? 'is-editing' : '';\n  const dragStatus = currentPath !== '/' ? 'drag-is-hidden' : '';\n  const importantStatus = important ? 'is-important' : '';\n  const completedStatus = completed ? 'is-completed' : '';\n  const infoBarStatus = date.length > 0 || comment.length > 0;\n  const paddingStyle = infoBarStatus ? 'has-infoBar' : '';\n\n  return (\n    <Draggable draggableId={uid} index={index}>\n      {(provided, snapshot) => {\n        const dragStyle = {\n          boxShadow: snapshot.isDragging\n            ? '2px 2px 5px 1px rgba(0, 0, 0, 0.1), -2px -2px 5px 1px rgba(0, 0, 0, 0.1)'\n            : '',\n          ...provided.draggableProps.style,\n        };\n\n        return (\n          <div\n            className={`edit-head ${importantStatus} ${dragStatus}`}\n            {...provided.draggableProps}\n            ref={provided.innerRef}\n            style={dragStyle}\n          >\n            <div className=\"edit-head__drag\" {...provided.dragHandleProps}>\n              <i className=\"fas fa-bars\" />\n            </div>\n            <div className=\"edit-head__checkbox\">\n              <input\n                type=\"checkbox\"\n                name=\"completed\"\n                id={`completed-${uid}`}\n                checked={completed}\n                onChange={handleInputChange}\n              />\n              <label htmlFor={`completed-${uid}`} />\n            </div>\n            <div\n              className=\"edit-head__content\"\n              onClick={() => openEditMode(uid)}\n            >\n              <input\n                className={`edit-head__input-title ${completedStatus} ${paddingStyle}`}\n                type=\"text\"\n                name=\"title\"\n                value={title}\n                placeholder=\"Add a task\"\n                onChange={handleInputChange}\n              />\n              {infoBarStatus && <SingleInfoBar data={data} />}\n            </div>\n            <div className=\"edit-head__priority\">\n              <input\n                type=\"checkbox\"\n                name=\"important\"\n                id={`important-${uid}`}\n                checked={important}\n                onChange={handleInputChange}\n              />\n              <label htmlFor={`important-${uid}`} />\n            </div>\n            <div\n              className={`edit-head__edit ${editStatus}`}\n              onClick={() => openEditMode(uid)}\n            >\n              <i className=\"fas fa-pen edit-head__icon-edit\" />\n            </div>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nEditTaskHead.propTypes = {\n  uid: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    time: PropTypes.string,\n    comment: PropTypes.string,\n    important: PropTypes.bool,\n    completed: PropTypes.bool,\n    isEditMode: PropTypes.bool,\n  }).isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  openEditMode: PropTypes.func.isRequired,\n  currentPath: PropTypes.string.isRequired,\n};\n\nexport default EditTaskHead;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EditTaskBody = props => {\n  const { uid, data, handleInputChange, saveTask, resetTask } = props;\n  const { isEditMode, date, time, comment } = data;\n\n  if (!isEditMode) {\n    return null;\n  }\n\n  return (\n    <div className=\"edit-body\">\n      <div className=\"edit-body__content\">\n        <div className=\"edit-body__field\">\n          <label htmlFor=\"deadline\" className=\"edit-body__label\">\n            Deadline\n          </label>\n          <div className=\"edit-body__input-wrapper\">\n            <input type=\"date\" name=\"date\" value={date} onChange={handleInputChange} />\n            <input type=\"time\" name=\"time\" value={time} onChange={handleInputChange} />\n          </div>\n        </div>\n        <div className=\"edit-body__field\">\n          <label htmlFor=\"comment\" className=\"edit-body__label\">\n            Comment\n          </label>\n          <textarea\n            name=\"comment\"\n            rows=\"8\"\n            placeholder=\"Type your memo here...\"\n            value={comment}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      <div className=\"edit-body__btns\">\n        <button\n          type=\"button\"\n          className=\"edit-body__btn edit-body__btn--cancel\"\n          onClick={() => resetTask()}\n        >\n          &#10005; Cancel\n        </button>\n        <button\n          type=\"button\"\n          className=\"edit-body__btn edit-body__btn--add\"\n          onClick={e => saveTask(e, uid)}\n        >\n          ＋ Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nEditTaskBody.propTypes = {\n  uid: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    date: PropTypes.string,\n    time: PropTypes.string,\n    comment: PropTypes.string,\n    important: PropTypes.bool,\n    completed: PropTypes.bool,\n    isEditMode: PropTypes.bool,\n  }).isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  saveTask: PropTypes.func.isRequired,\n  resetTask: PropTypes.func.isRequired,\n};\n\nexport default EditTaskBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditTaskHead from './EditTaskHead';\nimport EditTaskBody from './EditTaskBody';\n\nclass SingleTask extends React.Component {\n  static propTypes = {\n    uid: PropTypes.number.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      date: PropTypes.string,\n      time: PropTypes.string,\n      comment: PropTypes.string,\n      important: PropTypes.bool,\n      completed: PropTypes.bool,\n      isEditMode: PropTypes.bool,\n    }).isRequired,\n    updateTask: PropTypes.func.isRequired,\n    saveTask: PropTypes.func.isRequired,\n    resetTask: PropTypes.func.isRequired,\n    openEditMode: PropTypes.func.isRequired,\n    currentPath: PropTypes.string.isRequired,\n  };\n\n  handleInputChange = e => {\n    const { name, value, type, checked } = e.currentTarget;\n    const inputValue = type === 'checkbox' ? checked : value;\n    const { uid, data, updateTask } = this.props;\n    let resetStar = {};\n\n    // If the task marks completed, uncheck the star automatically.\n    if ((name === 'completed' && checked) || data.completed) {\n      resetStar = {\n        important: false,\n      };\n    }\n\n    updateTask(uid, {\n      [name]: inputValue,\n      ...resetStar,\n    });\n  };\n\n  render() {\n    const { uid, index, data, openEditMode, saveTask, resetTask, currentPath } = this.props;\n\n    return (\n      <li className=\"single-task\">\n        <form className=\"single-task__edit\">\n          <EditTaskHead\n            uid={uid}\n            index={index}\n            data={data}\n            handleInputChange={this.handleInputChange}\n            openEditMode={openEditMode}\n            currentPath={currentPath}\n          />\n          <EditTaskBody\n            uid={uid}\n            data={data}\n            handleInputChange={this.handleInputChange}\n            saveTask={saveTask}\n            resetTask={resetTask}\n          />\n        </form>\n      </li>\n    );\n  }\n}\n\nexport default SingleTask;\n","const todos = [\n  {\n    id: 1,\n    title: 'Shopping',\n    date: '2022-01-31',\n    time: '18:30',\n    comment: '',\n    completed: false,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 2,\n    title: 'Reading',\n    date: '2022-02-01',\n    time: '10:20',\n    comment: 'books list: Atomic Habits',\n    completed: false,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 3,\n    title: 'Watch movies',\n    date: '',\n    time: '',\n    comment: '',\n    completed: true,\n    important: false,\n    isEditMode: false,\n  },\n  {\n    id: 4,\n    title: 'Buy comics',\n    date: '2022-01-04',\n    time: '',\n    comment: 'Attack on Titan',\n    completed: false,\n    important: true,\n    isEditMode: false,\n  },\n  {\n    id: 5,\n    title: 'Camping',\n    date: '',\n    time: '15:00',\n    comment: 'with friends and bring some food.',\n    completed: true,\n    important: false,\n    isEditMode: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nimport AddTaskForm from './AddTaskForm';\nimport SingleTask from './SingleTask';\nimport sampleTodos from '../sample-todos';\n\nclass TabContent extends React.Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      path: PropTypes.string,\n    }).isRequired,\n  };\n\n  baseState = '';\n\n  state = {\n    tasks: [...sampleTodos],\n    newTaskIsOpen: false,\n  };\n\n  componentDidMount() {\n    const stateTasksValue = localStorage.getItem('todoItem');\n    const baseStateValue = localStorage.getItem('baseTodos');\n\n    if (stateTasksValue) {\n      this.setState({ tasks: JSON.parse(stateTasksValue) });\n    }\n\n    if (baseStateValue) {\n      this.baseState = JSON.parse(baseStateValue);\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoItem', JSON.stringify(this.state.tasks));\n    localStorage.setItem('baseTodos', JSON.stringify(this.baseState));\n  }\n\n  openNewTask = () => {\n    this.setState({ newTaskIsOpen: true });\n  };\n\n  addTask = task => {\n    const tasks = [\n      ...this.state.tasks,\n      {\n        id: Date.now(),\n        ...task,\n        isEditMode: false,\n      },\n    ];\n\n    this.setState({ tasks });\n    this.cancelAddTask();\n  };\n\n  cancelAddTask = () => {\n    this.setState({ newTaskIsOpen: false });\n  };\n\n  openEditMode = uid => {\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      task.isEditMode = false; // Close all opened task\n      this.baseState = this.state; // Save a copy of this.state\n\n      if (task.id === uid) {\n        return {\n          ...task,\n          isEditMode: true,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  saveTask = (e, uid) => {\n    e.preventDefault();\n\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      if (task.id === uid) {\n        return {\n          ...task,\n          isEditMode: false,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  updateTask = (uid, updatedContent) => {\n    const tasks = [...this.state.tasks];\n    const updatedTask = tasks.map(task => {\n      if (task.id === uid) {\n        return {\n          ...task,\n          ...updatedContent,\n        };\n      }\n\n      return task;\n    });\n\n    this.setState({ tasks: updatedTask });\n  };\n\n  resetTask = () => {\n    this.setState(this.baseState);\n  };\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n    const { tasks } = this.state;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.index === destination.index) {\n      return;\n    }\n\n    const newTasks = [...tasks];\n    const removeData = newTasks.splice(source.index, 1);\n    newTasks.splice(destination.index, 0, removeData[0]);\n\n    this.setState({\n      tasks: newTasks,\n    });\n  };\n\n  render() {\n    const { tasks, newTaskIsOpen } = this.state;\n    const currentPath = this.props.match.path;\n    const results = [\n      {\n        path: '/',\n        content: tasks,\n      },\n      {\n        path: '/progress',\n        content: tasks.filter(task => !task.completed),\n      },\n      {\n        path: '/completed',\n        content: tasks.filter(task => task.completed),\n      },\n    ];\n\n    return (\n      <div className=\"tab-content wrapper-s\">\n        {newTaskIsOpen ? (\n          <AddTaskForm addTask={this.addTask} cancelAddTask={this.cancelAddTask} />\n        ) : (\n          <div className=\"add-task\" onClick={this.openNewTask}>\n            ＋ Add a task\n          </div>\n        )}\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId={currentPath}>\n            {provided => (\n              <ul className=\"tasks-wrapper\" ref={provided.innerRef} {...provided.droppableProps}>\n                {results.map(\n                  result =>\n                    currentPath === result.path &&\n                    result.content\n                      .sort((a, b) => b.important - a.important)\n                      .map((task, index) => (\n                        <SingleTask\n                          key={task.id}\n                          uid={task.id}\n                          index={index}\n                          data={task}\n                          openEditMode={this.openEditMode}\n                          updateTask={this.updateTask}\n                          saveTask={this.saveTask}\n                          resetTask={this.resetTask}\n                          currentPath={currentPath}\n                        />\n                      ))\n                )}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default TabContent;\n","import React from 'react';\nimport GithubCorner from 'react-github-corner';\n\nconst GithubBanner = () => (\n  <div className=\"github-banner\">\n    <GithubCorner\n      href=\"https://github.com/a3216lucy/react-todo\"\n      bannerColor=\"#283044\"\n      size=\"77\"\n      target=\"_blank\"\n    />\n  </div>\n);\n\nexport default GithubBanner;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport TabMenuList from './TabMenuList';\nimport TabContent from './TabContent';\nimport GithubBanner from './GithubBanner';\n\nconst App = () => {\n  const routes = [\n    {\n      path: '/',\n      exact: true,\n      component: TabContent,\n    },\n    {\n      path: '/progress',\n      component: TabContent,\n    },\n    {\n      path: '/completed',\n      component: TabContent,\n    },\n  ];\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <GithubBanner />\n        <TabMenuList />\n        {routes.map((route, index) => (\n          <Route key={index} path={route.path} exact={route.exact} component={route.component} />\n        ))}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './layout/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}